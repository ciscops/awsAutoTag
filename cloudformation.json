{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Prerequisites"
          },
          "Parameters": [
            "IsCloudTrailEnabled"
          ]
        }
      ],
      "ParameterLabels": {
        "IsCloudTrailEnabled": {
          "default": "Is CloudTrail already enabled in this region? CloudTrail is a requirement for Cloudwatch Events. If not enabled, please enable CloudTrail before proceeding."
        }
      }
    }
  },
  "Parameters": {
    "IsCloudTrailEnabled": {
      "Description": "Specify if CloudTrail is enabled in the current region",
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ]
    }
  },
  "Conditions": {
    "CreateResources": {
      "Fn::Equals": [
        {
          "Ref": "IsCloudTrailEnabled"
        },
        "Yes"
      ]
    }
  },
  "Resources": {
    "EC2EventRule": {
      "Type": "AWS::Events::Rule",
      "Condition": "CreateResources",
      "Properties": {
        "Description": "Trigger a Lambda function anytime a new EC2 resource is created (EC2 instance)",
        "EventPattern": {
          "detail-type": [
            "AWS API Call via CloudTrail"
          ],
          "detail": {
            "eventSource": [
              "ec2.amazonaws.com"
            ],
            "eventName": [
              "RunInstances"

            ]
          }
        },
        "Name": "New-EC2Resource-Event",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "ProductionAlias"
            },
            "Id": "Production"
          }
        ]
      }
    },
    "CFAutoTag": {
      "Type": "AWS::Lambda::Function",
      "Condition": "CreateResources",
      "Properties": {
        "Code": {
          "S3Bucket" : "taggingbuild",
          "S3Key" : "Auto_Tag_EC2.zip"
        },
        "Description": "This function tags EC2 Resources in response to Cloudwatch Events.",
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaAutoTagRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": "60"
      }
    },
    "StableVersion": {
      "Type": "AWS::Lambda::Version",
      "Condition": "CreateResources",
      "Properties": {
        "FunctionName": {
          "Ref": "CFAutoTag"
        },
        "Description": "Stable version"
      }
    },
    "ProductionAlias": {
      "Type": "AWS::Lambda::Alias",
      "Condition": "CreateResources",
      "Properties": {
        "FunctionName": {
          "Ref": "CFAutoTag"
        },
        "FunctionVersion": {
          "Fn::GetAtt": [
            "StableVersion",
            "Version"
          ]
        },
        "Name": "PROD"
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "ProductionAlias"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EC2EventRule",
            "Arn"
          ]
        }
      }
    },
    "LambdaAutoTagRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "CreateResources",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LambdaGetLatestWindowsAmiIdPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Stmt1458923097000",
                  "Effect": "Allow",
                  "Action": [
                    "cloudtrail:LookupEvents"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Sid": "Stmt1458923121000",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags",
                    "ec2:Describe*",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ManageEC2InstancesGroup": {
      "Type": "AWS::IAM::Group",
      "Condition": "CreateResources"
    },
    "TagBasedEC2RestrictionsPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Condition": "CreateResources",
      "Properties": {
        "Description": "This policy allows Start/Stop/Reboot/Terminate for EC2 instances where the tag 'Owner' doesn't match the current requester's user ID.",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "LaunchEC2Instances",
              "Effect": "Allow",
              "Action": [
                "ec2:Describe*",
                "ec2:RunInstances"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "AllowActionsIfYouAreTheOwner",
              "Effect": "Allow",
              "Action": [
                "ec2:StopInstances",
                "ec2:StartInstances",
                "ec2:RebootInstances",
                "ec2:TerminateInstances"
              ],
              "Condition": {
                "StringEquals": {
                  "ec2:ResourceTag/PrincipalId": "${aws:userid}"
                }
              },
              "Resource": [
                "*"
              ]
            }
          ]
        },
        "Groups": [
          {
            "Ref": "ManageEC2InstancesGroup"
          }
        ]
      }
    }
  },
  "Outputs": {}
}